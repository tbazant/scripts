#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;

die "No XML ID given!" unless $ARGV[0];

our %result = ();
our %lnums = ();
our @kid_arr = ();
our @new_order = ();
our $DEBUG = 0;

# assemble the initial cmd, run it
# and iterate over returned results recursively
my $cmd = "grep -n 'xml:id=\"$ARGV[0]\"' xml/*.xml";
debug($cmd);

foreach (qx($cmd)) {
  debug($_);
  my $extract = extract_filename($_);
  $lnums{$extract->{fname}} = $extract->{lnum};
  recurse($extract);
}

debug("result hash: \n");
print Dumper(%result) if $DEBUG;

foreach (get_toplevels(\%result)) {
  @kid_arr = ();
  my @arr = ($_);
  push (@arr, recurse_kids($result{$_}));
  push (@new_order, \@arr);
}

foreach my $row (@new_order) {
  print $ARGV[0] . ": ";
  print join(' -> ', @{$row});
  print "\n";
}

sub get_toplevels {
  my $result = shift;
  my @toplevels = @_;
  my @keys = keys(%{$result});
  my @vals = values(%{$result});
  foreach my $key (@keys) {
    unless (grep( /^$key$/, @vals) ) {
      debug("toplevel: $key" );
      push (@toplevels, $key);
    }
  }
  return @toplevels;
}

sub recurse_kids {
  my $kid = shift;
  if (grep(/^$kid$/, values(%result))) {
    push(@kid_arr, $kid . ' +'. $lnums{$kid});
    if(exists($result{$kid})) {
      recurse_kids($result{$kid});
    } else {
      return @kid_arr;
    }
  }
}

# find which files are referring the file sent as an argument
# and for each of these file, do the same recursively
# and store the line-ups in a resulting hash
# intil no referrer is found
sub recurse {
  my $opts = shift;
  my $old_file = $opts->{fname};
  debug('old file: ' . $old_file);
  my $cmd = "grep -n 'href=\"$old_file\"' xml/*.xml | egrep -v \"(link|xml-stylesheet|xml-model)\"";
  debug($cmd);
  my @lines = qx($cmd);
  foreach (@lines) {
    my $extract = extract_filename($_);
    $result{$extract->{fname}} = $old_file;
    $lnums{$extract->{fname}} = $extract->{lnum};
    recurse($extract);
  }
}

# get a grep line and return a file name + the line number
sub extract_filename {
  my $line = shift;
  my @arr = split(':', $line);
  my $lnum = $arr[1];
  @arr = split('/', $arr[0]);
  chomp($arr[1]);
  my $result = {
    'fname' => $arr[1],
    'lnum' => $lnum,
  };
  return $result;
}

sub debug {
  my $msg = shift;
  chomp($msg);
  print STDERR "DEBUG: $msg\n" if $DEBUG;
}
